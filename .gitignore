# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor  
#  Cursor is an AI-powered code editor.`.cursorignore` specifies files/directories to 
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore


# ===================================================================
# GERAL: Sistema Operacional e Editores de Código
# ===================================================================

# Arquivos de sistema do macOS
.DS_Store
.AppleDouble
.LSOverride

# Arquivos de sistema do Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Arquivos de log e bancos de dados temporários
*.log
*.sql
*.sqlite
*.tmp

# Arquivos de IDEs e Editores
.idea/
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.sublime-project
*.sublime-workspace

# ===================================================================
# Android (app_android)
# ===================================================================
*.apk
*.aab
*.ap_
*.dex
build/
app/build/
captures/
.gradle/
local.properties
*.jks
*.keystore

# ===================================================================
# Angular (app_angular)
# ===================================================================
/dist/
/tmp/
/out-tsc/
/node_modules/
.angular/
coverage/
# Descomente abaixo se seus arquivos de ambiente contiverem segredos
# src/environments/environment.prod.ts
# src/environments/environment.ts

# ===================================================================
# C & C++ (app_c, app_c_csfml, app_c++, app_c++sfml)
# ===================================================================
# Arquivos compilados
*.o
*.obj
*.so
*.a
*.dll
*.lib
*.dylib
*.pdb
*.gdb

# Executáveis
*.exe
*.out
*.app

# Diretórios de build
bin/
build/
obj/

# ===================================================================
# Flutter (app_flutter)
# ===================================================================
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
build/
ios/Pods/
ios/.symlinks/
ios/Flutter/
android/.gradle/
android/local.properties
android/app/build/
*.iml

# ===================================================================
# Go (app_go, app_go_fyne, app_go_gio, etc.)
# ===================================================================
# Binários
*.exe
*.exe~
*.test
*.out

# Diretório de dependências (antigo)
# vendor/

# ===================================================================
# Java (app_java, app_java_javafx, app_java_swing)
# ===================================================================
# Arquivos compilados
*.class

# Pacotes
*.jar
*.war
*.ear

# Diretórios de build (Maven, Gradle, etc.)
target/
build/
bin/
.gradle/

# ===================================================================
# JavaScript (app_js web node)
# ===================================================================
node_modules/
dist/
build/
public/build/
.npm/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
coverage/
.env
.env.local
.env.*.local

# ===================================================================
# PHP (app_php)
# ===================================================================
vendor/
composer.phar
.env
storage/framework/
storage/logs/
bootstrap/cache/

# ===================================================================
# Python (app_python, app_python_qt, app_python_tkinter)
# ===================================================================
# Ambientes virtuais
.env
.venv
env/
venv/

# Bytecode e arquivos compilados
__pycache__/
*.pyc
*.pyo
*.pyd

# Distribuição e pacotes
build/
dist/
eggs/
*.egg-info/
*.egg
.pytest_cache/
.tox/
.coverage
htmlcov/

# Jupyter Notebook
.ipynb_checkpoints

# ===================================================================
# Rust (app_rust, app_rust_gtk)
# ===================================================================
target/
*.rlib
*.rs.bk

# ===================================================================
# Scripts (app_bash, app_powershell)
# ===================================================================
# Arquivos de log e backup
*.log
*.tmp
*.bak

# Variáveis de ambiente e segredos
*.env
secrets.*
config.local.*

