Para montar uma aula sobre Programa√ß√£o Orientada a Objetos (POO) com Java, podemos estruturar a aula de forma did√°tica e bem explicativa. Vamos passar pelos conceitos essenciais de POO e ilustr√°-los com exemplos de c√≥digo passo a passo.

---

### **Aula: Introdu√ß√£o √† Programa√ß√£o Orientada a Objetos com Java**

### **Objetivo da Aula:**
Entender os principais conceitos da POO e como implement√°-los em Java. Ao final da aula, o aluno ser√° capaz de criar classes, objetos, usar heran√ßa, polimorfismo, encapsulamento e abstra√ß√£o.

---

### **1. O que √© POO (Programa√ß√£o Orientada a Objetos)?**

A Programa√ß√£o Orientada a Objetos √© um paradigma de programa√ß√£o que usa objetos e suas intera√ß√µes para modelar o mundo real. A POO organiza o c√≥digo de forma modular e reutiliz√°vel, dividindo o programa em "objetos", que representam entidades do mundo real.

**Principais conceitos de POO:**

- **Classe:** Defini√ß√£o de um objeto.
- **Objeto:** Inst√¢ncia de uma classe.
- **Encapsulamento:** Proteger os dados e s√≥ permitir o acesso por m√©todos.
- **Heran√ßa:** Criar uma nova classe a partir de uma classe existente.
- **Polimorfismo:** Permitir que objetos de diferentes classes sejam tratados de forma semelhante.
- **Abstra√ß√£o:** Simplificar as intera√ß√µes com objetos, escondendo os detalhes.

---

### **2. Criando uma Classe e Objetos**

**Classe**: Um molde ou plano para criar objetos.

**Objeto**: Uma inst√¢ncia de uma classe.

Vamos come√ßar criando uma classe `Carro`.

#### Exemplo de c√≥digo: Criando uma classe `Carro`

```java
// Definindo a classe Carro
public class Carro {
    // Atributos (ou propriedades) da classe Carro
    String modelo;
    String cor;
    int ano;

    // M√©todo (ou comportamento) da classe Carro
    void ligar() {
        System.out.println("O carro est√° ligado!");
    }

    void acelerar() {
        System.out.println("O carro est√° acelerando.");
    }

    void parar() {
        System.out.println("O carro parou.");
    }
}
```

#### Explica√ß√£o:

- **Atributos**: `modelo`, `cor` e `ano` s√£o as caracter√≠sticas do carro.
- **M√©todos**: `ligar()`, `acelerar()` e `parar()` representam as a√ß√µes que um carro pode executar.

Agora, vamos criar um **objeto** da classe `Carro` na classe `Main` e utilizar os m√©todos e atributos definidos.

```java
public class Main {
    public static void main(String[] args) {
        // Criando um objeto 'meuCarro' da classe Carro
        Carro meuCarro = new Carro();

        // Atribuindo valores aos atributos
        meuCarro.modelo = "Fusca";
        meuCarro.cor = "Azul";
        meuCarro.ano = 1970;

        // Chamando os m√©todos do objeto
        System.out.println("Modelo do carro: " + meuCarro.modelo);
        meuCarro.ligar();
        meuCarro.acelerar();
        meuCarro.parar();
    }
}
```

#### O que acontece aqui:
- Criamos um objeto `meuCarro` da classe `Carro`.
- Atribu√≠mos valores aos atributos `modelo`, `cor` e `ano`.
- Chamamos os m√©todos `ligar()`, `acelerar()` e `parar()` para simular as a√ß√µes de um carro.

---

### **3. Encapsulamento: Protegendo os Dados**

O encapsulamento visa proteger os dados de uma classe, permitindo o acesso a eles apenas por meio de m√©todos.

#### Exemplo de encapsulamento:

```java
public class Carro {
    // Atributos privados (protegidos)
    private String modelo;
    private String cor;
    private int ano;

    // M√©todos p√∫blicos para acessar e modificar os atributos
    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public String getCor() {
        return cor;
    }

    public void setCor(String cor) {
        this.cor = cor;
    }

    public int getAno() {
        return ano;
    }

    public void setAno(int ano) {
        this.ano = ano;
    }

    // M√©todos da classe
    void ligar() {
        System.out.println("O carro est√° ligado!");
    }

    void acelerar() {
        System.out.println("O carro est√° acelerando.");
    }

    void parar() {
        System.out.println("O carro parou.");
    }
}
```

#### Explica√ß√£o:

- **Atributos privados**: Agora os atributos `modelo`, `cor` e `ano` s√£o privados.
- **M√©todos getters e setters**: Criamos m√©todos p√∫blicos para acessar e modificar esses atributos.

---

### **4. Heran√ßa: Reutilizando C√≥digo**

A heran√ßa permite que uma classe herde atributos e m√©todos de outra classe.

#### Exemplo de heran√ßa:

```java
// Classe base
public class Veiculo {
    String modelo;
    String cor;

    void ligar() {
        System.out.println("O ve√≠culo est√° ligado.");
    }
}

// Classe derivada
public class Carro extends Veiculo {
    int ano;

    void acelerar() {
        System.out.println("O carro est√° acelerando.");
    }
}
```

#### Explica√ß√£o:
- **Veiculo** √© a classe base.
- **Carro** √© a classe derivada, que herda os atributos e m√©todos de `Veiculo`.

Agora, podemos criar um objeto de `Carro` que possui os m√©todos e atributos de `Veiculo`.

```java
public class Main {
    public static void main(String[] args) {
        Carro meuCarro = new Carro();
        meuCarro.modelo = "Fusca";
        meuCarro.cor = "Azul";
        meuCarro.ano = 1970;

        meuCarro.ligar();  // M√©todo herdado
        meuCarro.acelerar();  // M√©todo da classe Carro
    }
}
```

---

### **5. Polimorfismo: Comportamento Variado**

Polimorfismo permite que m√©todos tenham comportamentos diferentes dependendo do objeto que os chama.

#### Exemplo de polimorfismo:

```java
// Classe base
public class Animal {
    void fazerSom() {
        System.out.println("O animal faz um som.");
    }
}

// Classe derivada
public class Cachorro extends Animal {
    @Override
    void fazerSom() {
        System.out.println("O cachorro late.");
    }
}

// Classe derivada
public class Gato extends Animal {
    @Override
    void fazerSom() {
        System.out.println("O gato mia.");
    }
}
```

Agora, podemos criar um m√©todo para demonstrar o polimorfismo.

```java
public class Main {
    public static void main(String[] args) {
        Animal animal = new Animal();
        Animal cachorro = new Cachorro();
        Animal gato = new Gato();

        animal.fazerSom();  // Chama o m√©todo da classe Animal
        cachorro.fazerSom();  // Chama o m√©todo da classe Cachorro
        gato.fazerSom();  // Chama o m√©todo da classe Gato
    }
}
```

#### Explica√ß√£o:
- Usamos o **polimorfismo** para permitir que objetos de tipos diferentes (`Cachorro`, `Gato` e `Animal`) chamem o mesmo m√©todo `fazerSom()`, mas com comportamentos diferentes.

---

### **6. Abstra√ß√£o: Escondendo Detalhes**

A abstra√ß√£o permite que voc√™ defina interfaces ou classes abstratas para fornecer uma interface comum sem se preocupar com a implementa√ß√£o detalhada.

#### Exemplo de abstra√ß√£o com interface:

```java
interface Veiculo {
    void acelerar();
    void parar();
}

class Carro implements Veiculo {
    public void acelerar() {
        System.out.println("O carro est√° acelerando.");
    }

    public void parar() {
        System.out.println("O carro parou.");
    }
}
```

---

### **Conclus√£o**

Com esses exemplos, voc√™ aprendeu os conceitos fundamentais de POO em Java, como **classes**, **objetos**, **encapsulamento**, **heran√ßa**, **polimorfismo** e **abstra√ß√£o**. Esses conceitos s√£o a base para a cria√ß√£o de programas modulares e reutiliz√°veis.

---

Agora voc√™ pode realizar atividades pr√°ticas com mais exemplos, modificando os c√≥digos para entender melhor os conceitos.

Se tiver d√∫vidas ou quiser mais detalhes em algum ponto, s√≥ avisar! üòä